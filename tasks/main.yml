---

- name: Configure kernel parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: True
    state: present
    reload: True
  with_dict:
    vm.max_map_count: '262144'
  register: kernel_params
  tags:
    - configuration
    - system
    - kernel

- name: Create elasticsearch directories
  file:
    state: directory
    path: "{{ item }}"
    recurse: False 
    owner: "{{ elasticsearch_docker_container_user_uid }}"
    group: "{{ elasticsearch_docker_container_group_uid }}"
  with_items:
    - "{{ elasticsearch_config_dir }}"
    - "{{ elasticsearch_data_dir }}"
    - "{{ elasticsearch_certificate_dir }}"
    - "{{ elasticsearch_snapshot_dir_host }}"
  register: dir_create
  tags:
    - configuration
    - files

- name: Copy SSL certificates
  copy:
    src: "{{ elasticsearch_certificate_local_dir }}/"
    dest: "{{ elasticsearch_certificate_dir }}/"
    mode: 0440
    owner: "{{ elasticsearch_docker_container_user_uid }}"
    group: "{{ elasticsearch_docker_container_group_uid }}"
  register: copy_certs
  tags:
    - configuration
    - files
    - certificates

- name: Copy elasticsearch configuration
  template:
    src: elasticsearch.j2
    dest: "{{ elasticsearch_config_dir }}/elasticsearch.yml"
    owner: "{{ elasticsearch_docker_container_user_uid }}"
    group: "{{ elasticsearch_docker_container_group_uid }}"
  register: es_config
  tags:
    - configuration
    - files

- name: Remove elasticsearch keystore
  file:
    path: "{{ elasticsearch_config_dir }}/elasticsearch.keystore"
    state: absent
  when: elasticsearch_force_keystore_create
  tags:
    - configuration
    - files
    - keystore

- name: Create elasticsearch keystore
  command: "docker run --rm -i -v {{ elasticsearch_config_dir }}:/usr/share/elasticsearch/config:rw,Z -v {{ elasticsearch_config_dir }}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z {{ elasticsearch_docker_image }}:{{ elasticsearch_docker_tag   }} elasticsearch-keystore create"
  args:
    creates: "{{ elasticsearch_config_dir }}/elasticsearch.keystore"
  register: keystore_create
  tags:
    - configuration
    - files
    - keystore

- name: Add elasticsearch keystore keys
  command: "docker run --rm -i -v {{ elasticsearch_config_dir }}:/usr/share/elasticsearch/config:rw,Z -v {{ elasticsearch_config_dir }}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z {{ elasticsearch_docker_image }}:{{ elasticsearch_docker_tag   }} elasticsearch-keystore add --stdin bootstrap.password"
  args:
    stdin: "{{ elasticsearch_security_bootstrap_password }}"
  when: keystore_create.changed
  register: keystore_write
  tags:
    - configuration
    - files
    - keystore

- name: Deploy elasticsearch containers
  docker_container:
    api_version: "{{ elasticsearch_docker_api_version }}"
    state: started
    restart: "{{ (copy_certs is defined and copy_certs.changed) or ( es_config is defined and es_config.changed) or ( keystore_create is defined and keystore_create.changed) or (kernel_params is defined and kernel_params.changed) or (kestore_write is defined and keystore_write.changed) }}"
    name: "smd_infra_elastic"
    user: root
    image: "{{ elasticsearch_docker_image }}:{{ elasticsearch_docker_tag }}"
    detach: true
    cpu_period: "{{ elasticsearch_docker_container_cpu_period }}"
    cpu_quota: "{{ ( elasticsearch_docker_container_cpu_period * elasticsearch_docker_container_cpu_count ) | int }}"
    memory: "{{ elasticsearch_docker_container_memory | default( ( ansible_memtotal_mb / 2 ) | int ) }}m"
    ulimits: 
      - memlock:-1:-1
      - nofile:65535:65535
    env:
      node.name: "{{ ansible_hostname }}"
      ES_JAVA_OPTS: "-Xms{{ ( elasticsearch_docker_container_memory | default( ( ansible_memtotal_mb / 2 ) | int ) / 2) | int }}m -Xmx{{ (elasticsearch_docker_container_memory | default( ( ansible_memtotal_mb / 2 ) | int ) / 2) | int }}m" 
    restart_policy: unless-stopped
    log_driver: json-file
    log_options:
      max-size: '30m'
      max-file: '3'
    labels:
      SERVICE_TYPE: elasticsearch 
      SERVICE_OWNER: infra
      SERVICE_LABEL: "{{ elasticsearch_cluster_name }}"
    published_ports:
      - "{{ elasticsearch_network_address }}:{{ elasticsearch_network_port }}:9200"
      - "{{ elasticsearch_network_address }}:9300:9300"
    volumes:
      - "{{ elasticsearch_data_dir }}:/usr/share/elasticsearch/data/:rw,Z"
      - "{{ elasticsearch_config_dir }}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z"
      - "{{ elasticsearch_config_dir }}/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore:ro,Z"
      - "{{ elasticsearch_certificate_dir }}:/usr/share/elasticsearch/config/certs/:ro,Z"
      - "{{ elasticsearch_config_dir }}/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping.yml:ro,Z"
      - "{{ elasticsearch_snapshot_dir_host }}:{{ elasticsearch_snapshot_dir_dest }}:rw"
  register: container_deploy
  tags:
    - deploy

- name: Wait for elasticsearch port to be opened
  wait_for:
    state: started
    host: "{{ elasticsearch_network_address }}"
    port: "{{ elasticsearch_network_port }}"
    delay: 1
    timeout: 120
  tags:
    - deploy

- name: Check elasticsearch cluster status
  uri: 
    method: GET
    url_username: elastic
    url_password: "{{ secrets.elasticsearch.bootstrap.password }}"
    url: "{% if elasticsearch_security_http_enabled %}https{% else %}http{% endif %}://{{ elasticsearch_network_address }}:{{ elasticsearch_network_port }}/_cluster/health"
    remote_src: True
    return_content: True
    validate_certs: False
    body_format: json
  register: cluster_check
  until: cluster_check.status in [ 200 ] and cluster_check.json.status == "green"
  delay: 15 
  retries: 5
  when: elasticsearch_cluster_check
  tags:
    - deploy
